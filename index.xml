<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>basics on Engine GO</title>
    <link>https://www.enginego.org/</link>
    <description>Recent content in basics on Engine GO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Jan 2018 00:10:14 +0800</lastBuildDate>
    
	<atom:link href="https://www.enginego.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DNS查询</title>
      <link>https://www.enginego.org/basics/dns%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/basics/dns%E6%9F%A5%E8%AF%A2/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
http://www.apple.com  今天你准备买iPhoneX，你打开浏览器输入www.apple.com。回车，浏览器跳到苹果的官网，然后把iPhoneX的沙龙照显示出来。浏览器是如何找到这些内容并且显示出来的呢？
我小的时候网络还在起步阶段，家家户户都准备着一本比字典还要厚的黄页来专门记载每户的电话号码。记得有一次我打给魏同学问作业，字母表先翻到W，然后找到他的名字，再找到对应的电话号码。难以置信吧，我现在回想起来也觉得。
![feel_old]()
其实互联网一开始也是这么，互联网刚诞生不久的时候，只有一些高校和科学家在用，全部的联网机器加起来才300多台。每台机器都有一个类似黄页的文件（hosts文件）。专门记载这个域名对应哪个ip地址，这个文件的内容就像：
www.enginegirls.org 31.41.59.26 www.apple.com 119.145.144.223 www.ieee.org 23.38.177.118
当有了ip地址之后，就能访问那台计算机获取到我们想要的信息了。至于怎么获取我们会在ip地址这一节里面介绍。这个阶段域名其实就是ip的别名，
问题随着时间发展出现了，小时候的黄页每年买一本，要是在一年中你更换了电话号码，其他人也就找不到你了。互联网也是，每个小时都有新的域名被注册，新的主机加入互联网，如果还只是继续更新一个文件会有几个问题。1. 主机数量太多了，现在已经超过10亿台设备接入互联网，每次查询的话都要从这里面查会比较慢。2. 大部分的网站用户根本不会上，就像大部分在黄页上的人我都不会联系。每上线一个小网站就更新全球的电脑这样显然小题大做了。那么有什么方法可以解决这个问题呢？
现代的计算机域名查询ip会经过这几个步骤：
 先查询浏览器有没有保留缓存 如果你之前访问过这个网站，那么浏览器会保存对应的ip地址，这样就能减少查询ip的时间。
 查询本地的hosts文件 （没错，hosts文件还没有退出时代）如果hosts文件有对应的内容，例如上面的
www.apple.com 119.145.144.223  那么计算机就会直接使用这个ip
 DNS服务器查询 全球一共有13组共632台根域名服务器，分布在世界各地，每台下面又有N台子域名服务器。子域名服务器专门保存和更新域名和ip的对应关系。 当计算机在前两个方法都没有找到对应的ip，就会进行dns查询，其实就是问一下最近的子域名服务器，从它们中获取到ip地址，而子域名服务器自己会定时从根域名服务器中获取最新的内容。这样，每次我就不用保存和更新全世界所有网站对应的ip，上哪个网就查询哪个。
  Q&amp;amp;A 那么是不是破坏这13组根域名服务器就能破坏互联网的查询功能呢？例如别人如果输入苹果的域名却跳到一个其他的网站呢。 是的。很遗憾它分布在全世界各个地区，很难同时攻击它们 :D
浏览器直接输入ip地址，是不是就能访问到apple.com呢？ 很遗憾地说，在现在的互联网，大部分情况下是不可以的。如果想知道详细的请看域名解析  </description>
    </item>
    
    <item>
      <title>Windows安装Docker教程</title>
      <link>https://www.enginego.org/dockers/windows%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85docker%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/dockers/windows%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85docker%E6%95%99%E7%A8%8B/</guid>
      <description>作者：Windson Yang 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
Windows安装Docker教程 官方英文教程
安装前须知 你的系统需满足以下几个条件，如果不满足以下要求，请参考第二节
 确保你电脑安装了64位的Windows 10 Pro, Enterprise或者Education(1511 November update, Build 10586 or later)版本。
 如果你的电脑安装了VirtualBox（一个虚拟机软件，默认系统没有安装）请注意，Windows的Docker版本因为需要Microsoft Hyper-V来运作，安装之后会令VirtualBox无效。
 必须启动虚拟化（默认启动），可以在任务管理中找到这一项确保enabled
Windows8检查
点击开始 &amp;gt; 任务管理 &amp;gt; 性能 &amp;gt; CPU
黄色的Virtualization为Enabled即可
Windows7检查
运行Microsoft® Hardware-Assisted Virtualization Detection Tool工具，然后按照步骤来检测。
   Docker建立的容器和镜像会被计算机上面的所有用户共享，多账号的系统中要注意数据安全问题。
 开始安装  下载Docker稳定版 双击下载文件夹中的InstallDocker.msi文件。 阅读协议内容觉得没问题之后点击接受协议（不接受将无法安装:O)，然后安装。   一般软件应该安装在非系统盘（C盘）中，这样即使以后需要重装系统，软件也不会丢失。安装路径不要包含中文）
  输入系统管理员密码使Docker可以安装网络组件。 完成  启动Docker 安装完成后Docker会自动启动，你可以从状态栏看到Docker正在运作 验证安装成功 运行终端(cmd.exe或者PowerShell)
PS C:\Users\Docker&amp;gt; docker --version Docker version 17.03.0-ce, build 60ccb22  看到Docker version提示的字样代表安装成功了</description>
    </item>
    
    <item>
      <title>macOS系统安装docker教程</title>
      <link>https://www.enginego.org/dockers/macos%E5%AE%89%E8%A3%85docker%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/dockers/macos%E5%AE%89%E8%A3%85docker%E6%95%99%E7%A8%8B/</guid>
      <description>作者：Windson Yang 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
(官方英文教程)[https://docs.docker.com/toolbox/toolbox_install_mac/]
 系统必须满足以下全部要求：  2010后的苹果电脑，支持英特尔MMU内存虚拟 10.10.3或者更新的苹果系统 从Docker1.13版本（准备推出）之后不再支持10.10版本（OS X 10.10 Yosemite） 不能安装4.3.30版本之前的VirtualBox（默认系统并没有这个软件）    下载软件Docker for macOS 双击Docker.dmg安装
 双击应用程序中的Docker.app来启动Docker
 系统会请求你输入密码来启动Docker，Docker需要特殊权限来安装网络组件
 然后可以在屏幕右上角看到Docker的标志
 可以点击这个标志浏览设置
 如此简单就安装成功啦，可以吃点巧克力奖励下自己了。:D
  </description>
    </item>
    
    <item>
      <title>协议</title>
      <link>https://www.enginego.org/basics/%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/basics/%E5%8D%8F%E8%AE%AE/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
计算机使用了非常多协议，大家接触得比较多的是HTTP, TCP/IP, FTP等，那么到底什么是协议呢？计算机中的协议和我们现实生活中签的协议其实挺像，双方都按照协议上的条约发送，接受数据。举个例子，你和你的朋友通过短信约定明天吃饭的时间地点。日常生活的话信息内容可以是
 明天下午5点在我家等
 或者
 明天在我家等吧，下午5点
 这两个信息大家都能理解，不过计算机就像强迫症的人一样，它们会先从一些流行的协议中找一个然后双方遵守，例如协议A
 这条信息必须由两行组成，第一行是时间，时间必须是24小时制，第二行是地点，地点必须是我家，你家两个中的其中一个。
 这样发出来的信息就会是：
明天17点 我家
这样有什么优点呢？第一，无论对计算机或者人类来说，信息都变得有序和容易处理。当我们知道信息遵守协议A的时候，我们不需要阅读信息都知道第一行的内容会是时间，第二行会是地点。第二，这样只要遵守协议A的人都能对信息进行处理，即使现在你换个人发送信息，他也能和你互相沟通。第三，容易分层，计算机传输数据有可能会使用多层的传输协议，这样协议与协议之间也能轻松地相互沟通。
举个常见的例子，当你使用浏览器访问www.apple.com，浏览器其实是按照HTTP协议的约定向苹果服务器发出这个信息：
第一行是请求方法和协议版本， 第二行是请求的URL。 第三行是连接是否持久化。 ... GET / HTTP/1.1\r\n Host: www.apple.com\r\n Connection: keep-alive\r\n Pragma: no-cache\r\n Cache-Control: no-cache\r\n Upgrade-Insecure-Requests: 1\r\n User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36\r\n Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\r\n DNT: 1\r\n Accept-Encoding: gzip, deflate, br\r\n Accept-Language: en,zh;q=0.9,en-US;q=0.8,zh-CN;q=0.7\r\n  在HTTP协议里面这些信息统称为HTTP的请求头部（每行最后的\r\n是换行符，服务器读取到\r\n就知道接下来的内容是下一个头部信息）。它们大多有固定的选项，服务器拿到数据之后就可以直接对照协议来分析数据。想了解更多的学生可以参考[An overview of HTTP]（https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview）</description>
    </item>
    
    <item>
      <title>域名</title>
      <link>https://www.enginego.org/basics/%E5%9F%9F%E5%90%8D/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/basics/%E5%9F%9F%E5%90%8D/</guid>
      <description> 作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
计算机知识往往互相关联，要真正了解域名是什么，必须先了解什么是URI。这里有一些常见的例子。
https://www.apple.com http://www.w3c.org ftp://example.org/resource.txt file:///Users/example/hello.jpg  最后两个大家可能不太熟悉，以最后一个为例子，你们可以尝试把自己电脑中任意的文件拖放到浏览器中，浏览器会去猜这个文件类型，一些常见的文件类型例如图片，浏览器可以判断并渲染出来。同时浏览器的地址栏也会变成file开头。这个例子中的file就是这个URI所使用的协议。常见的协议还有
HTTP 超文本传输协议 SMTP 邮件协议 telnet 终端传输协议 DNS 域名系统协议 DHCP 动态主机配置协议  好吧，我承认部分对于一般大众不是很常见，不过如果你想认真学习编程，起码看到这些名词的时候知道是什么。感兴趣的学生可以前往Lists of network protocols。那么协议又是什么呢？其实协议的本质非常简单。
域名（Domain names）是互联网基础架构的关键部分。它们为互联网上任何可用的网页服务器提供了人类可读的地址。 任何连上互联网的电脑都可以通过一个公共IP地址访问到，对于IPv4来说，这个地址由32位组成（它们通常写成四个范围在0~255以内，由点分隔的数字组成，比如173.194.121.32），而对于IPv6来说，这个地址由128位组成，通常写成八组由冒号分隔的四进制数(e.g., 2027:0da8:8b73:0000:0000:8a2e:0370:1337).  域名解析 当购买了域名之后，可以在购买处设置绑定域名 61.91.161.217 clients1.google.com  DNS解析 并且设置DNS解析
   主机记录 记录内容 线路类型 TTL 记录值     @ A 全网默认 600 52.43.176.46   www A 全网默认 600 52.43.176.46    </description>
    </item>
    
    <item>
      <title>基础术语</title>
      <link>https://www.enginego.org/basics/%E5%9F%BA%E7%A1%80%E6%9C%AF%E8%AF%AD/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/basics/%E5%9F%BA%E7%A1%80%E6%9C%AF%E8%AF%AD/</guid>
      <description> 作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
服务端 很简单，服务器就是一台**24小时运行**，运行着**专为服务器设计的系统**的**高性能计算机**。它也是由内存，硬盘，CPU组成。不过它会根据这台服务器的用途来配置不同的组件。有些服务器专门用来存储文件，图片，那么它就需要更大的硬盘，对CPU的要求就没那么高。有些专门用来进行高密度的计算，例如视频转格式，数据分析那么就要更快的CPU。 服务器会根据不同客户端的请求返回不同的内容，当你使用浏览器访问一个页面的时候，实际上浏览器就是寻找该页面对应的服务器获取相应的图片和文字内容。  客户端 常见的客户端包括浏览器，手机，它请求服务器需要的资源，然后客户端解析返回的内容并且显示给用户。  </description>
    </item>
    
    <item>
      <title>字符串编码</title>
      <link>https://www.enginego.org/basics/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/basics/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
在打开文件或者邮件的时候，你一定会遇到像这样的字符串乱码的问题：
É��OÇ��  学习编程的过程一定会遇到Unicode, UTF-8, ASCII, Latin-1这些编码术语。要了解字符串编码，必须要了解计算机的一些基础知识，例如字符串如何存储与表示，如果知识希望靠运气来解决或者避开它，反而会在一次次盲目的尝试中浪费更多的时间。这篇文章的每一节都非常重要，不能跳过。所以请花上15分钟静下心读吧：
![like_unicode]()
基本名词 字符(Character） A B C 天 气 エ ン コ 😁  上面的用空格分割的都是单个字符，它代表对人类有意义的各种语言文字。
字符串(Strings） Hello 天气 Hola  由多个字符组成的集合
键值表(Hash Table) 一一对应的表，例如函数
y = x * 2  每个x都有对应并且唯一的一个y值对应，x与y组成的集合就是键值表，其中一种形式：
1 2 3 2 4 6  这里的每一个键(1, 2, 3)都有对应的值(2, 4, 6)
编码（encode） 将字符串按照一定的模式（例如某些规则，或者根据一一对应的键值表（Hash Table））转换成二进制数字，然后显示或者存储
解码（decode） 与编码相反，解码把二进制数字按照一定的模式转换成字符串显示
计算机如何存储数据 计算机最初由西方国家设计以及发展，理所当然他们就使用了自己的语言作为常用的字符集，以英文为例，字符集包括大小写字母，数字加上一些标点符号和运算符号大概120个。因为早期的计算机存储资源非常宝贵（请自行搜索下3.5英寸软盘）。计算机科学家希望用最少的空间来存储字符。同时，计算机是使用二进制存储数据的，无论是文字，图片，数字还是其他数据，都是以数字&amp;rdquo;0&amp;rdquo;或者&amp;rdquo;1&amp;rdquo;存储起来的。举个例子，如果计算机要存储&amp;rdquo;BEE&amp;rdquo;这个字符串，它先根据一个字母与数字的转换表把字母转换成数字然后存储。我们把下面这个对应表叫做Cherry表，Cherry表使用二进制用3位就能表示8种不同的字符：
000 001 010 011 100 101 110 111 A B C D E F G H  当我们打开文件编辑器，添加“BEE”这3个字母并保存为“BEE.</description>
    </item>
    
    <item>
      <title>相对路径，绝对路径</title>
      <link>https://www.enginego.org/basics/%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/basics/%E8%B7%AF%E5%BE%84/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
当前路径 当你打开终端的时候，会看到例如：
Windsons C:\usr\foo\: OSX WindsondeMacBook-Air:/usr/foo/  这里的&amp;rdquo;C:\usr\foo\&amp;ldquo;和&amp;rdquo;/usr/foo/&amp;ldquo;指当前执行指令的路径。也就是你的*当前路径*，你在终端中输入的指令，默认针对的就是当前路径，假如你输入&amp;rdquo;ls&amp;rdquo;(macOX)/&amp;ldquo;dir&amp;rdquo;(Windows)，计算机会理解成&amp;rdquo;ls/dir /usr/foo/&amp;ldquo;，所以会列出*当前路径中&amp;rdquo;/usr/foo/&amp;ldquo;下面的所有文件。
那什么是绝对路径和相对路径呢？ 举个现实生活的例子： Cherry在路上遇到Sunkist，它问Sunkist的公司地址在哪里，Sunkist可能有两种答案：
 中国广东省广州市思哲路石室大厦 以这里为起点，西南方向500米的石室大厦  这两个答案都正确，第一个答案从国家到省份城市巨细无遗地描述称为绝对路径， 第二个答案以当前的位置为起点所描述的称为相对路径。
例如：foo文件夹的绝对路径是
C:\Administor\foo\  你想要列出这个文件夹里面的所有文件，你可以告诉计算机这个文件夹的完整地址，也就是绝对路径
dir C:\Administor\foo\  也可以根据当前自己的位置找这个文件（这时候输入的就是相对路径），假如你打开终端，当前路径是
C:\Administor\bar\:  那么你也可以这样列出：
dir ..\foo\  在路径命令中&amp;rdquo;.&amp;ldquo;以及&amp;rdquo;..&amp;ldquo;这两个符号有特殊意义，分别代表当前路径以及上一级目录，也就是说如果你当前路径是：
C:\Administor\bar\  那么
.\ = C:\Administor\bar\ ..\ = C:\Administor\  当我们要找这个文件夹
C:\Administor\foo\  需要先回到上一层目录
dir ..\  然后再使用cd命令进入bar目录
cd bar\  如何切换路径 可以使用cd指令
cd [PATH]  这里的path既可以是绝对路径也可以是相对路径，如果当前路径为：
C:\Administor\foo\:  你要跳到
C:\whatever\sunkist\:  就可以</description>
    </item>
    
    <item>
      <title>终端，命令行, shell</title>
      <link>https://www.enginego.org/basics/%E7%BB%88%E7%AB%AF/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/basics/%E7%BB%88%E7%AB%AF/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
终端是一个可以通过命令行执行其他程序的程序 如果你曾经用过DOS系统，对这张图片应该不会陌生： (图片来源维基百科)
如果你没有接触过DOS这样久远的系统，你可以尝试先打开自己计算机的终端
macOS: 同时按住&amp;quot;control&amp;quot;+&amp;quot;space&amp;quot;键，在搜索框输入termianl，&amp;quot;回车&amp;quot; Windows 7：打开&amp;quot;开始&amp;quot;菜单，在搜索框里输入cmd，&amp;quot;回车&amp;quot; Windows 8+：同时按住&amp;quot;win&amp;quot;+&amp;quot;Q&amp;quot;键，然后在弹出的搜索框里输入cmd，&amp;quot;回车&amp;quot;  成功打开之后你会看到计算机打开了一个类似上面图片的一个程序。光标会停留在某一行。类似：
WindsondeMacBook-Air:~ windson$ |  接下来你可以通过这个程序执行不同的程序。基本所有编程语言（Python，C，C++）都可以通过终端来执行。你可以理解终端是一个执行其他程序的程序。 你在电影里面看到一个很酷的黑客对着一个黑的屏幕疯狂敲键盘，一般他们使用的就是这个程序。 当你看到这样的界面的时候，可以尝试输入一个命令，然后让终端执行。
macOS: &amp;quot;ls&amp;quot;+&amp;quot;回车&amp;quot; Windows: &amp;quot;dir&amp;quot;+&amp;quot;回车&amp;quot;  输入回车之后，你会发现终端显示出了一些文字，仔细观察的话你会发现其实是你电脑中某个目录下的文件。ls/dir这个命令就是用作*列出当前目录的文件*，当然这个命令还有很多参数，也就是你可以告诉计算机显示什么文件（隐藏／非隐藏），显示文件的什么内容（创建日期，大小），ls回车只会调用一个常用的默认配置，假如你想把隐藏文件也显示的话，在终端输入
macOS: &amp;quot;ls -a&amp;quot;+&amp;quot;回车&amp;quot; Windows: &amp;quot;dir -a&amp;quot;+&amp;quot;回车&amp;quot;  终端还有很多其他指令，大家可以参照自己的操作系统找相应的命令。除此之外，终端还可以执行其他程序，我们习惯了图形界面双击图标打开一个应用（或者称为快捷方式），计算机先通过后续名猜测需要用什么方式打开或者运行这个文件，如果是图片的话，计算机就会用图片浏览器打开，如果是可执行文件（Windows下的exe后缀），计算机会先找到该应用的位置，然后运行这个应用，这个可执行文件里面包含了应用运行需要加载哪些资源，如何运行。在终端的话，如果要运行一个Python语言写的程序hello.py。在安装好Python之后可以直接输入
Python3 hello.py  其实就是告诉计算机用什么程序（Python）执行什么文件（hello.py）
为什么要用终端 以前的计算机根本没有图形界面，只能对着这样黑乎乎的界面一行行输入指令，然后祈祷它不会出错。既然现在已经有图形界面了，为什么我们还需要学习用终端呢？
 多功能，一般一个软件只会专注于一个功能，例如Word进行文字编辑，PowerPoint进行幻灯片编辑。但是你可以通过终端让计算机调用不同的程序完成多种多样的功能。
 方便，对，一开始可能难以置信，但是使用终端确实比图形界面（GUI，也就是我们平时看到的带有按钮以及经过设计的界面）要方便。你可能也会曾经遇过某一款软件更新，你找不到原本功能的按钮在哪里了。（例如某段时间Windows系统就把把“开始”菜单隐藏了。或者应用程序更新你找不到原本的功能按钮在哪里。）使用命令（例如上面的&amp;rdquo;ls&amp;rdquo;／&amp;rdquo;dir&amp;rdquo;）的话即使更新你也不需要担心，当然一开始你会要记住这些指令。
 高效，跨平台，跨机器，例如你要删除一个文件夹中（可能包含子文件夹）超过10天之前创建的所有文件，一般来说的话你需要一个个文件夹找，然后对每个文件夹里的文件进行时间排序，再手动删除，如果里面包含了100个文件夹那么会费很多时间，同时也容易出错。使用终端的话可以直接运行
find /path/to/base/dir/* -type f -ctime +10 -delete   而且只要跑同一个系统就不用担心命令会执行出错。（不用担心Word2003与Wrod2007的兼容问题）
 容易定制，使用指令的好处是很容易根据需求来修改，加入想删除的是所有超过10天之前创建的文件夹，只需要修改&amp;rsquo;-type f&amp;rsquo;为&amp;rsquo;-type d&amp;rsquo;即可，这里type代表的是指令针对什么类型操作，f是files，d这是directory。  当然，要学会基本的指令也要花时间，例如一个find指令就有超过50个参数（这个命令比较特殊，参数比较多，我也常不记得，想用的时候通过系统自带的man page搜索就好）。
如果你使用对的是Windows系统请注意，Windows有自己的一套特殊指令, 我不建议大家使用Windows来学习编程，相对来说macOX与Linux系统对开发者（也就是你）更加友好，使用他们会节约你很多时间。不过这不代表你需要额外买一台电脑才能学习编程，只需要安装双系统或者虚拟系统就好，如果你没有接触过，没关系。我们会一步步介绍，你可以先在Windows中安装Docker，然后就可以在Windows系统中使用Linux了。</description>
    </item>
    
  </channel>
</rss>