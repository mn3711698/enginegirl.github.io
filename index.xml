<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>目录 on Engine GO</title>
    <link>https://www.enginego.org/</link>
    <description>Recent content in 目录 on Engine GO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 Mar 2018 00:19:14 +0800</lastBuildDate>
    
	<atom:link href="https://www.enginego.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>贝叶斯分类器</title>
      <link>https://www.enginego.org/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB/</link>
      <pubDate>Mon, 26 Mar 2018 00:19:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
贝叶斯模型在机器学习以及人工智能中都有出现，cherry分类器使用了朴素贝叶斯模型算法，经过简单的优化，使用1000个训练数据就能得到97.5%的准确率。虽然现在主流的框架都带有朴素贝叶斯模型算法，大多数开发者只需要直接调用api就能使用。但是在实际业务中，面对不同的数据集，必须了解算法的原理，实现以及懂得对结果进行分析，才能达到高准确率。
 cherry分类器 关键字过滤 贝叶斯模型 数学推导 贝叶斯模型实现 测试 统计分析 总结  cherry分类器 基础术语： cherry分类器默认支持中英文分类，用作例子的数据缓存中，中文训练数据包含正常，政治敏感，赌博，色情4个类别，英文训练数据包含正常邮件，垃圾邮件两个类别 (训练数据可以通过Google drive下载)。调用非常容易，使用pip安装后，输入句子：
 警方召开了全省集中打击赌博违法犯罪活动专项行动电视电话会议。会议的重点是“查处”六合彩、赌球赌马等赌博活动。
 &amp;gt;&amp;gt;&amp;gt; import cherry &amp;gt;&amp;gt;&amp;gt; result = cherry.classify(&#39;警方召开了全省集中打击赌博违法犯罪活动专项行动电 电话会议。会议的重点是“查处”六合彩、赌球赌马等赌博活动。&#39;) Building prefix dict from the default dictionary ... Loading model from cache /var/folders/md/0251yy51045d6nknpkbn6dc80000gn/T/jieba.cache Loading model cost 0.894 seconds. Prefix dict has been built succesfully.  分类器判断输入句子有99.7%的概率是正常句子，0.2%是政治敏感，剩余0.1%是其他两个类别
&amp;gt;&amp;gt;&amp;gt; result.percentage [(&#39;normal.dat&#39;, 0.997), (&#39;politics.dat&#39;, 0.002), (&#39;gamble.dat&#39;, 0.0), (&#39;sex.dat&#39;, 0.0)]  其中对分类器判断影响最大的词语分别是赌博，活动，会议，违法犯罪，警方，打击
&amp;gt;&amp;gt;&amp;gt; result.</description>
    </item>
    
    <item>
      <title>理解字符串编码</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81/</link>
      <pubDate>Sun, 25 Mar 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
在打开网页或者文件的时候，你一定会遇过像这样的字符串乱码问题：
É��OÇ��，系统包括了...  或者报错
UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xc4  同时或多或少也遇到Unicode, UTF-8, ASCII, Latin-1这些编码术语。要真正地理解字符串编码，必须要了解计算机的一些基础知识，包括字符串如何存储与转换。如果只是希望靠运气来解决或者避开它，反而会在一次次盲目的尝试中浪费更多的时间。
 基础术语 计算机如何存储数据 ASCII编码 GBK编码 Unicode UTF-8编码 HTML实体编码 URL编码 常见问题 总结  基础术语  字符 字符串 键值表 字符串编码与解码  字符 A B C 天 气 エ ン コ 😁  上面的用空格分割的都是单个字符(Character)，它代表对人类能看懂的有意义的语言文字。
字符串 Hello 天气 Hola  字符串(Stirngs)就是多个字符组成的集合
键值表 一一对应的表，例如函数
y = x * 2  每个x都对应着唯一的一个y值，x与y组成的集合就是键值表(Hash Table)，例如：
1 -&amp;gt; 2 2 -&amp;gt; 4 3 -&amp;gt; 6  这里的每一个x(1, 2, 3)都有对应的y(2, 4, 6)</description>
    </item>
    
    <item>
      <title>Ping命令</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/ping%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 27 Feb 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/ping%E5%91%BD%E4%BB%A4/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处 (www.enginego.org)。
 基础版 进阶版  基础版 什么是ping命令 有时候当我们无法上网，会计算机的朋友会说，你ping一下网关，或者你ping一个网站看看。ping这个命令，其实是操作系统自带的命令之一，如果在终端中输入：
ping www.enginggo.org  正常的话会返回：
64 bytes from 104.24.121.11: icmp_seq=0 ttl=54 time=170.383 ms 64 bytes from 104.24.121.11: icmp_seq=1 ttl=54 time=170.053 ms 64 bytes from 104.24.121.11: icmp_seq=2 ttl=54 time=171.298 ms 64 bytes from 104.24.121.11: icmp_seq=3 ttl=54 time=170.352 ms 64 bytes from 104.24.121.11: icmp_seq=4 ttl=54 time=170.636 ms ...  从我的计算机发送64个字节的数据到104.24.121.11 (这个是经过DNS查询后的www.enginego.org的ip地址)，从发送到接受对方返回总共经过了170.xxx毫秒。代表www.enginego.org对应的那台服务器是开启并且响应ping指令的。
如果返回：
PING www.enginego.org (104.24.121.11): 56 data bytes Request timeout for icmp_seq 0 Request timeout for icmp_seq 1 Request timeout for icmp_seq 2 Request timeout for icmp_seq 3  这就代表连接超时，访问失败。原因有可能是本地计算机网络问题，也有可能是对应的服务器关闭或者不响应ping指令。</description>
    </item>
    
    <item>
      <title>公私钥（未完成）</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%85%AC%E7%A7%81%E9%92%A5/</link>
      <pubDate>Tue, 27 Feb 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%85%AC%E7%A7%81%E9%92%A5/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
我接触到很多开发者对于公钥和私钥只是一知半解，其实它的原理非常简单。
我们一般认识的密码／密钥类似保险柜，你设置密码成0335，那么打开的密码也是0335，这种叫做对称密钥，也就是开锁和关锁用的是同一个密码。另外一种关闭的密码与打开的密码不同，叫做非对称密钥。在网络传输中，如果你要和其他人传输一段重要的信息，例如你最怕的蔬菜的名字。你想要加密传输，那么你可以把这段信息通过密钥加密，例如你要传输的是
芹菜，苦瓜，香菜  </description>
    </item>
    
    <item>
      <title>前端or后端（未完成）</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%89%8D%E7%AB%AFor%E5%90%8E%E7%AB%AF/</link>
      <pubDate>Tue, 27 Feb 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%89%8D%E7%AB%AFor%E5%90%8E%E7%AB%AF/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。</description>
    </item>
    
    <item>
      <title>编程语言选择（未完成）</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E9%80%89%E6%8B%A9/</link>
      <pubDate>Tue, 27 Feb 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E9%80%89%E6%8B%A9/</guid>
      <description> 作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处 (www.enginego.org)。
刚开始学习编程的时候，我也很困惑这个问题，有那么那么多的编程语言，常见的有
 python ruby php Go c java R &amp;hellip;  我们可以根据你的职业职业规划来选择要学习的语言：
前端工程师  完成设计 后端交互  前端工程师主要的职责是把设计师的设计图实现，当设计师设计完界面之后
![design]()
完成设计 前端工程师需要用代码来实现设计图，例如界面的布局，按钮的颜色等等。这期间需要和设计师合作交流，讨论哪些方面在工程实现中可能会有困难，可能影响性能这类的因素。
后端交互 完成设计之后，前端工程师需要根据不同的页面以及业务逻辑来与后端交互，这句话什么意思呢？假如你开发的是一个让用户写日记的应用。那么当用户写完日记之后，点击保存按钮，这个按钮要触发一个保存日记的事件，需要把日记根据协议传输到服务器，然后存储在数据库里面。听起来有点复杂，其实非常简单，因为都有通用的工具帮助你完成。
后端工程师。  业务逻辑处理 前端交互  业务逻辑处理 前端交互 运维工程师 数据分析／机器学习工程师 </description>
    </item>
    
    <item>
      <title>DNS查询</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/dns%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/dns%E6%9F%A5%E8%AF%A2/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
当你在浏览器输入www.apple.com。按下回车之后，浏览器跳到苹果的官网，把iPhoneX的介绍和图片显示出来。浏览器是如何通过www.apple.com这个域名找到iPhone的内容并且正确显示呢？第一步就要经过DNS查询。
 DNS查询 为什么要使用域名？ Q&amp;amp;A  DNS查询 DNS查询其实很好理解，生活上比较贴近的例子就像用黄页找电话号码。在我小的时候网络还在起步阶段，家家户户都要准备一本比字典还要厚的黄页来专门记载每户的电话号码。有一次我打给魏同学问作业，先从黄页的字母表翻到W，接着根据他的家庭地址猜测哪个是他家的电话（因为黄页通常都记载家长的名字），最后才能找到对应的电话号码打过去。难以置信吧，我现在回想起来也觉得。
刚开始，互联网联网的电脑加起来才几千台。每台电脑都保存一个类似黄页的文件（称为hosts文件）。用作记载域名对应哪个IP地址。
www.enginego.org 104.24.120.11 www.apple.com 119.145.144.223 www.ieee.org 23.38.177.118  （每一行分别对应着域名和IP地址）
当我们在浏览器输入域名的时候，浏览器会先查询这个hosts文件，找到对应的IP地址。然后再通过IP地址获取到服务器里面的资源，也就是iPhoneX的简介和图片。
为什么要使用域名？  容易记忆 计算机比较擅长处理数字，但是人类就差多了，访问苹果官网要背那么多数字显然不现实。使用域名就像我们使用手机的通讯录一样，我们会为常用的电话号码添加联系人姓名，打电话的时候直接输入名字就可以拨打，不需要背电话号码。 容易扩展 早期的计算机和IP地址是一一对应的关系，但是一台计算机的性能并不能承受大量用户的请求。而一个域名可以对应多个IP地址。这样不同地区的用户就会查询到不同的IP地址，公司也能使用多台服务器来提供服务了。   不过问题随着互联网的发展慢慢显现了，小时候的黄页每年买一本，要是在一年中你更换了电话号码，其他人也就找不到你了。互联网也是，每个小时都有新的域名被注册，新的主机加入互联网，如果还只是定时更新hosts文件会出现几个问题。
 主机数量太多了，现在已经超过10亿台设备接入互联网，每次查询的话都要从这里面查会比较慢。 大部分的网站用户根本不会上，就像大部分在黄页上的人我都不会联系。每上线一个小网站就更新全球的电脑这样显然小题大做了。那么有什么方法可以解决这个问题呢？  （很可惜，这是治标不治本的方法）
现代的计算机DNS查询会经过这3个步骤，一旦查询到，就会返回结果，并且跳过剩下的步骤：
 先查询浏览器有没有保留缓存 如果你之前访问过这个网站，那么浏览器会保存对应的IP地址，这样就能减少查询IP地址的时间。
 查询本地的hosts文件 （没错，hosts文件还没有退出时代）如果hosts文件有对应的内容，例如上面的
www.apple.com 119.145.144.223  那么计算机就会直接使用这个IP地址 你可以看看自己电脑的hosts文件看看有没有对应的内容
Windows c:\windows\system32\drivers\etc\hosts macOS /etc/hosts  DNS服务器查询 当计算机在前两个方法都没有找到对应的IP地址，就会进行DNS服务器查询，它会发送一个UDP请求到最近的子域名服务器（默认是ISP运营商提供，在国内就是中国电信，中国联通，中国移动这几家），从它们中获取到IP地址。子域名服务器定时从根域名服务器中获取最新的内容域名和IP的对应关系。
  经过这三部，我们只需要记住某个网站的域名，就能获取到该网站的IP地址了。
Q&amp;amp;A  Q: 那么是不是破坏这13组根域名服务器就能破坏互联网的查询功能呢？例如别人如果输入苹果的域名却跳到一个其他的网站呢。
 A: 是的。很遗憾它分布在全世界各个地区，很难同时攻击它们 :D
 Q: 浏览器直接输入DNS查询到的苹果的IP地址，是不是就能访问到www.apple.com呢？
 A: 很遗憾地说，在现代的互联网，大部分情况下是不可以的。</description>
    </item>
    
    <item>
      <title>Windows安装Docker教程</title>
      <link>https://www.enginego.org/%E5%B7%A5%E5%85%B7/docker/windows%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85docker%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%B7%A5%E5%85%B7/docker/windows%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85docker%E6%95%99%E7%A8%8B/</guid>
      <description>作者：Windson Yang 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
Windows安装Docker教程 官方英文教程
安装前须知 你的系统需满足以下几个条件，如果不满足以下要求，请参考第二节
 确保你电脑安装了64位的Windows 10 Pro, Enterprise或者Education(1511 November update, Build 10586 or later)版本。
 如果你的电脑安装了VirtualBox（一个虚拟机软件，默认系统没有安装）请注意，Windows的Docker版本因为需要Microsoft Hyper-V来运作，安装之后会令VirtualBox无效。
 必须启动虚拟化（默认启动），可以在任务管理中找到这一项确保enabled
Windows8检查
点击开始 &amp;gt; 任务管理 &amp;gt; 性能 &amp;gt; CPU
黄色的Virtualization为Enabled即可
Windows7检查
运行Microsoft® Hardware-Assisted Virtualization Detection Tool工具，然后按照步骤来检测。
   Docker建立的容器和镜像会被计算机上面的所有用户共享，多账号的系统中要注意数据安全问题。
 开始安装  下载Docker稳定版 双击下载文件夹中的InstallDocker.msi文件。 阅读协议内容觉得没问题之后点击接受协议（不接受将无法安装:O)，然后安装。   一般软件应该安装在非系统盘（C盘）中，这样即使以后需要重装系统，软件也不会丢失。安装路径不要包含中文）
  输入系统管理员密码使Docker可以安装网络组件。 完成  启动Docker 安装完成后Docker会自动启动，你可以从状态栏看到Docker正在运作 验证安装成功 运行终端(cmd.exe或者PowerShell)
PS C:\Users\Docker&amp;gt; docker --version Docker version 17.03.0-ce, build 60ccb22  看到Docker version提示的字样代表安装成功了</description>
    </item>
    
    <item>
      <title>macOS系统安装docker教程</title>
      <link>https://www.enginego.org/%E5%B7%A5%E5%85%B7/docker/macos%E5%AE%89%E8%A3%85docker%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%B7%A5%E5%85%B7/docker/macos%E5%AE%89%E8%A3%85docker%E6%95%99%E7%A8%8B/</guid>
      <description>作者：Windson Yang 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
(官方英文教程)[https://docs.docker.com/toolbox/toolbox_install_mac/]
 系统必须满足以下全部要求：  2010后的苹果电脑，支持英特尔MMU内存虚拟 10.10.3或者更新的苹果系统 从Docker1.13版本（准备推出）之后不再支持10.10版本（OS X 10.10 Yosemite） 不能安装4.3.30版本之前的VirtualBox（默认系统并没有这个软件）    下载软件Docker for macOS 双击Docker.dmg安装
 双击应用程序中的Docker.app来启动Docker
 系统会请求你输入密码来启动Docker，Docker需要特殊权限来安装网络组件
 然后可以在屏幕右上角看到Docker的标志
 可以点击这个标志浏览设置
 如此简单就安装成功啦，可以吃点巧克力奖励下自己了。:D
  </description>
    </item>
    
    <item>
      <title>协议</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%8D%8F%E8%AE%AE/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
计算机使用了多种多样的协议，大家接触得比较多的是HTTP, TCP/IP, FTP, ICMP等，计算机中的协议和我们现实生活中签的协议其实挺像，双方都按照协议上的约定发送和解析数据。举个例子，你和你的朋友通过短信约定明天吃饭的时间地点。信息可以是：
 明天 上午9点 在公司等
 即使改变文字的顺序
 明天 在公司等吧， 上午9点
 一般人也能理解。不过计算机不一样，你可以把计算机当成患强迫症的朋友，它会要求你发的信息一定要符合这个约定：
日期（两个字）-&amp;gt; 时间（四个字）-&amp;gt; 地点（四个字）   明天 &amp;ndash;日期&amp;ndash; 上午9点 &amp;ndash;时间&amp;ndash; 在公司等 &amp;ndash;地点&amp;ndash;
 只要你和朋友遵守这个约定发送和接受信息，那么你们就互相遵守了一个协议。
这样有什么优点呢？  无论对计算机或者人类来说，信息都变得有序和容易处理。当我们知道信息遵守协议A的时候，我们不需要阅读信息都知道前两个字是日期，接着是四个字的时间，最后是四个字的地点。  举个常见的例子，当你使用浏览器访问www.apple.com，浏览器其实是按照HTTP协议的约定向苹果服务器发出信息：
第一行是请求方法和协议版本（8个字节） 第二行是请求的URL（30个字节） 第三行是连接是否持久化（30个字节） ...  实际发送的信息是：
0000 b0 7f b9 a3 68 36 98 e0 d9 9d a3 8f 08 00 45 00 0010 02 0a 76 f9 40 00 40 06 1e d1 c0 a8 01 58 68 18 0020 79 0b fe 5b 00 50 55 fb ab bc e6 45 57 80 50 18 .</description>
    </item>
    
    <item>
      <title>域名</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%9F%9F%E5%90%8D/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%9F%9F%E5%90%8D/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
计算机知识往往互相关联，要真正了解域名是什么，必须先了解什么是URI。这里有一些常见的例子。
https://www.apple.com http://www.w3c.org ftp://example.org/resource.txt file:///Users/example/hello.jpg  最后两个大家可能不太熟悉，以最后一个为例子，你们可以尝试把自己电脑中任意的文件拖放到浏览器中，浏览器会去猜这个文件类型，一些常见的文件类型例如图片，浏览器可以判断并渲染出来。同时浏览器的地址栏也会变成file开头。这个例子中的file就是这个URI所使用的协议。常见的协议还有
HTTP 超文本传输协议 SMTP 邮件协议 telnet 终端传输协议 DNS 域名系统协议 DHCP 动态主机配置协议  好吧，我承认部分对于一般大众不是很常见，不过如果你想认真学习编程，起码看到这些名词的时候知道是什么。感兴趣的学生可以前往Lists of network protocols。那么协议又是什么呢？其实协议的本质非常简单。
域名（Domain names）是互联网基础架构的关键部分。它们为互联网上任何可用的网页服务器提供了人类可读的地址。 任何连上互联网的电脑都可以通过一个公共IP地址访问到，对于IPv4来说，这个地址由32位组成（它们通常写成四个范围在0~255以内，由点分隔的数字组成，比如173.194.121.32），而对于IPv6来说，这个地址由128位组成，通常写成八组由冒号分隔的四进制数(e.g., 2027:0da8:8b73:0000:0000:8a2e:0370:1337).  </description>
    </item>
    
    <item>
      <title>基础术语</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E6%9C%8D%E5%8A%A1%E7%AB%AF/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E6%9C%8D%E5%8A%A1%E7%AB%AF/</guid>
      <description> 作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
服务端 很简单，服务器就是一台**24小时运行**，运行着**专为服务器设计的系统**的**高性能计算机**。它也是由内存，硬盘，CPU组成。不过它会根据这台服务器的用途来配置不同的组件。有些服务器专门用来存储文件，图片，那么它就需要更大的硬盘，对CPU的要求就没那么高。有些专门用来进行高密度的计算，例如视频转格式，数据分析那么就要更快的CPU。 服务器会根据不同客户端的请求返回不同的内容，当你使用浏览器访问一个页面的时候，实际上浏览器就是寻找该页面对应的服务器获取相应的图片和文字内容。  客户端 常见的客户端包括浏览器，手机，它请求服务器需要的资源，然后客户端解析返回的内容并且显示给用户。  </description>
    </item>
    
    <item>
      <title>终端</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E7%BB%88%E7%AB%AF/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E7%BB%88%E7%AB%AF/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处 (www.enginego.org)。
使用终端是我们开始编程的第一步，无论是运行程序，或者了解计算机的基本信息都需要用到。让我们愉快地和它玩耍把。
 基础版 进阶版  基础版  什么是终端 为什么要用终端  什么是终端  图形界面 命令行界面 亲自试试吧  图形界面 我们平时习惯了使用图形界面，当我们双击图标打开文件，计算机会先通过后续去猜测用什么程序运行文件，如果是图片(.jpg, .png)的话，计算机就会用图片浏览器打开，如果是可执行文件(macOS下的dmg后缀文件，Windows下的exe后缀文件)，计算机会先找到该应用的在硬盘中的位置，然后根据可执行文件里面包含的信息（需要加载什么资源）来运行程序。
命令行界面 在计算机刚开始发展的时候，并没有那么容易上手的操作界面，大家都是通过一个黑乎乎的程序输入命令，然后等待计算机执行。
这时候运行程序或者打开文件，则需要使用不同的命令。例如打开一个名为normal.txt的文本文件，可以用cat命令：
cat normal.txt  要打开图片的话，需要安装额外的软件来打开。要运行一个名为hello.py的python程序，在安装了python软件之后，在终端直接输入
python hello.py  回车之后就可以看到程序的输出结果了。其实图形界面与命令行界面运行的本质是一样的，运行程序或者打开文件：
 安装对应的软件 指定程序运行 (图形界面会根据后缀名帮你选择用什么程序来打开。)  亲自试试吧 你可以尝试先打开自己计算机的终端：
 macOS: 同时按住&amp;rdquo;control&amp;rdquo;+&amp;ldquo;space&amp;rdquo;键，在搜索框输入termianl，&amp;rdquo;回车&amp;rdquo;
Windows 7：打开&amp;rdquo;开始&amp;rdquo;菜单，在搜索框里输入cmd，&amp;rdquo;回车&amp;rdquo;
Windows 8+：同时按住&amp;rdquo;win&amp;rdquo;+&amp;ldquo;Q&amp;rdquo;键，然后在弹出的搜索框里输入cmd，&amp;rdquo;回车&amp;rdquo;
 成功打开之后，光标会停留在某一行。类似：
WindsondeMacBook-Air:~ windson$ |  因为和计算机交互需要遵守一定的指令规则，终端默认会运行一个程序，常见的是Bash(Bourne Again SHell)或者sh，你可以尝试输入一个命令，然后让终端执行。
 macOS: &amp;ldquo;ls&amp;rdquo;+&amp;ldquo;回车&amp;rdquo;
Windows: &amp;ldquo;dir&amp;rdquo;+&amp;ldquo;回车&amp;rdquo;
 输入回车之后，你会发现终端显示出了一些文字，仔细观察的话你会发现其实是你电脑中某个目录下的文件。ls/dir这个命令就是列出当前目录的文件。 当然这个命令还有很多参数，也就是你可以告诉计算机显示什么文件（隐藏／非隐藏），显示文件的详细内容（创建日期，大小），ls/dir只会调用一个常用的默认配置，假如你想把隐藏文件也显示的话，在终端输入
 macOS: &amp;ldquo;ls -a&amp;rdquo;+&amp;ldquo;回车&amp;rdquo;</description>
    </item>
    
    <item>
      <title>路径</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E8%B7%AF%E5%BE%84/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
 绝对路径和相对路径 当前路径 切换路径  绝对路径和相对路径 . └── usr ├── foo │ ├── first.md │ └── second.md ├── bar │ ├── sunkist.toml │ ├── cherry.toml  计算机文件的存放结构如上图一样，上图中，usr文件夹中包含了foo和bar两个文件夹，这两个文件夹分别包含了两个文件。路径指的是为文件/文件夹存放在计算机中的位置。举个现实的例子：
有一天，Cherry在路上遇到Sunkist，它问Sunkist的公司地址在哪里，Sunkist可能有两个答案：
 以这里为起点，西南方向500米的石室大厦 中国广东省广州市思哲路石室大厦  第一个答案以当前的位置为起点所描述的称为相对路径。第二个答案从国家到省份城市巨细无遗地描述称为绝对路径。根据Sunkist当前的位置不一样，它回答的相对路径会不一样，但是绝对路径是不会变化的。每个文件/文件夹在一台计算机中可能会有无数个相对路径，但是只有一个绝对路径。上图中，first.md的绝对路径是
/usr/foo/first.md (first.md的绝对路径)  相对foo目录的路径是
./first.md (相对foo目录的路径)  相对bar目录的相对路径是
../foo/first.md (相对bar目录的路径)  在路径命令中&amp;rdquo;.&amp;ldquo;以及&amp;rdquo;..&amp;ldquo;这两个符号有特殊意义，分别代表当前目录以及上一级目录。如果当前路径是&amp;rdquo;/usr/foo/&amp;rdquo;
/usr/foo/ (当前路径) ./ = /usr/foo/ (当前目录) ../ = /usr/ (上一级目录)  所以
./first.md  表示的是当前目录下的first.md文件(first.md原本就在foo目录里面)
../foo/first.md  表示的是先返回当前目录(/usr/bar/)的上一级目录(/usr/)，然后再进入foo目录，找到first.md文件
当前路径 当你打开终端的时候：
(masOS) WindsondeMacBook-Air:fun/ windson$ (Windsons) C:fun\:  这里的&amp;rdquo;fun/&amp;ldquo;和&amp;rdquo;C:fun\&amp;ldquo;指当前执行命令的地方，也就是你的当前路径。可以通过命令来查看当前路径的绝对路径</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/hook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/hook/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%86%85%E5%AD%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%86%85%E5%AD%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%A0%86%E6%A0%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%A0%86%E6%A0%88/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%B5%8C%E5%A5%97%E5%AD%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%B5%8C%E5%A5%97%E5%AD%97/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E6%8A%93%E5%8C%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E6%8A%93%E5%8C%85/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E8%BF%9B%E7%A8%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>如何准备技术面试</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
我刚工作的时候，对面试总是很恐惧，一方面怕简历无法通过筛选，另一方面怕现场发挥得不好，浪费了自己和面试官的时间。我当初并不知道对比其他求职者，自己的优势和劣势在哪里，也不知道自己到底值多少钱。 面试的时候都觉得面试官很严肃，问的问题我也都答不上，肯定没有机会入职，觉得自己烂透了，也不想浪费时间去面试多几家了。
现在回过头看，我觉得当初自己在欺骗自己，我真正担心的是即使自己认真准备简历和面试也对结果毫无影响，更不敢去想如果找不到工作没钱缴房租怎么办，索性海投简历碰运气。其实认真准备简历和面试是很有用的，因为毫无准备，随便面试的求职者真的太多了。 工作了几年，我作为面试官筛选过千份简历，面试过不下100名工程师。我慢慢发现，招聘真的是一件非常难的事。招的人要有计算机基础知识，有项目经验，愿意学习而且愿意来这家公司。所以只要你有一定的实力，现在的互联网行业还是买方市场，认真准备总是有收获的。我希望把这几年作为面试者和面试官身份的的经验給大家，希望大家可以学到从中一些面试的技巧，找到心仪的工作。
 分析阶段 准备阶段 面试阶段 总结阶段  分析阶段  公司需要怎样的员工 员工需要怎样的公司 了解自己的优势  公司需要怎样的员工 先从公司的角度出发，如果你是部门的总监，你会希望什么样的员工？
我很喜欢Google前CEO施密特分享的一个故事，他刚到Google的时候，Google还只是个小的创业公司。他以为Google和其他公司没什么两样，直到有一个周五，拉里佩奇在用谷歌搜索一些关键字的时候，他发现出现了一些不相干的广告推荐（这个情况我们现在在国内最大的搜索引擎也经常看到）。施密特以为接下来就是开几个会议，然后分到具体的工程师手上解决。但是拉里佩奇没有这么做，他用纸条写下&amp;rdquo;These Ads Suck!&amp;ldquo;，附上相关的截图贴在布告栏上就回家了。接下来的72小时彻底改变了施密特的认知。在周一凌晨5点，有几位并不是负责广告业务的工程师发来一份邮件，从头到尾阐述了这个问题产生的原因，他们的解决方案，以及这个计划对公司有什么影响。这和我们强制的996加班不一样，他们从公司的角度去思考，自愿自发地用周末的时间去解决并不属于自己范畴的问题。 这样的员工我想就是每个公司都需要的：
 刻苦耐劳，能及时解决问题 愿意自我学习，自我增值 团队精神，愿意帮助他人 对公司忠诚  所以求职者的简历，面试过程中必须能体现出这几点品质。 例如很多求职者简历提到喜欢计算机，平常花很多时间学习计算机，但是又给不出详细的答案，这样要不就是他们只是三天打鱼两天晒网地学习，要不就是没有认真思考这个问题。从简历的角度，与其写：
 热爱计算机，喜欢学习计算机系统的知识。
 建议修改为：
 喜欢阅读计算机系统的书籍，完成《深入理解计算机系统》90%以上的习题。有自己的博客文章系列分享学到的知识。
 如果你是面试官，你会选哪位呢？前一类基本三分之一的简历都有这类的描述，后一类呢？百中无一。
员工需要怎样的公司 找新工作之前，先认真思考下几个问题，一份工作中你最看重的是哪些方面？
 薪酬 公司福利／工作环境 工作方向（假如你要从技术转向管理，这个岗位提供这样的可能吗？) 公司发展前景 个人成长 其他  了解自己的想法之后，再进行筛选公司以及准备如何提问。我认为薪酬的重要程度远远不及公司文化，如果公司文化好，吸引到厉害的工程师。你认真待着一两年，进步速度要快得多。你可以根据自己的着重点，筛选不同的公司，以及准备向面试官提问的问题。 这点我们在面试阶段会介绍，提问这部分非常重要，我遇见很多求职者感觉不好意思提问，一方面怕面试官会觉得自己有很多要求，另一方面根本没有想好要问什么。这点我觉得非常不明智，公司和员工就是互相选择的，一定要多提问题，了解公司的文化以及岗位的职责。才不至于刚入职就因为不适应而要离开。如果求职者没有提问，面试官也会担心求职者入职后会不会不适应公司的某些规定，例如加班规定，着装要求。由于解雇一位员工比招聘要痛苦得多，面试官反而会不敢轻易录用他。
了解自己的优势 仔细分析自己的优势和劣势是什么，然后添加在简历中，优势可以从这几点入手，后面是面试官的理解：
优势
 大型项目的经验 （能解决项目普遍出现的问题，代码能力应该不会差。） 作为主要参与者得过奖项 (聪明，勇于尝试） 维护优秀的开源项目 (懂得团队协作，能写出优秀的代码） 发表过论文或者优秀的博客文章 (研究能力强，分析能力强） 数据结构和算法基础好，Leetcode中等难度都能bug free（基础不错，培养起来也简单） 思维敏捷，聪明，有想法 （需要有文章，论文，得奖来证明） 毕业于不错的学校 (学习努力）  与上面相反的就是劣势了。了解到自己的优势和劣势，简历就可以强调自己的优势，然后根据自己的劣势来准备。例如，如果你要面试的是一家公司的CTO，那么大型项目的经验可能就比较重要，如果面试的是研究岗位，那么论文与文章的数量就比较重要。</description>
    </item>
    
  </channel>
</rss>