<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>目录 on Engine GO</title>
    <link>https://www.enginego.org/</link>
    <description>Recent content in 目录 on Engine GO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Feb 2018 00:10:14 +0800</lastBuildDate>
    
	<atom:link href="https://www.enginego.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ping命令</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/ping%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 27 Feb 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/ping%E5%91%BD%E4%BB%A4/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
有时候当我们无法上网，会计算机的朋友会说，你ping一下网关，或者你ping一个网站看看。ping这个命令，其实是操作系统自带的命令之一，你在终端中输入ping加上域名／网关地址
ping www.enginggo.org  正常的话会返回：
64 bytes from 104.24.121.11: icmp_seq=0 ttl=54 time=170.383 ms 64 bytes from 104.24.121.11: icmp_seq=1 ttl=54 time=170.053 ms 64 bytes from 104.24.121.11: icmp_seq=2 ttl=54 time=171.298 ms 64 bytes from 104.24.121.11: icmp_seq=3 ttl=54 time=170.352 ms 64 bytes from 104.24.121.11: icmp_seq=4 ttl=54 time=170.636 ms ...   从我的计算机发送64个字节的数据到104.24.121.11（这个是经过DNS查询后的www.enginego.org的ip地址，从发送到接受对方返回总共经过了170.xxx毫秒。代表www.enginego.org对应的那台服务器是开启并且响应ping指令的。
 如果返回：
PING www.enginego.org (104.24.121.11): 56 data bytes Request timeout for icmp_seq 0 Request timeout for icmp_seq 1 Request timeout for icmp_seq 2 Request timeout for icmp_seq 3   这就代表连接超时，访问失败。原因有可能是本地计算机网络问题，也有可能是对应的服务器关闭或者不响应ping指令。</description>
    </item>
    
    <item>
      <title>公私钥（未完成）</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%85%AC%E7%A7%81%E9%92%A5/</link>
      <pubDate>Tue, 27 Feb 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%85%AC%E7%A7%81%E9%92%A5/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
我接触到很多开发者对于公钥和私钥只是一知半解，其实它的原理非常简单。
我们一般认识的密码／密钥类似保险柜，你设置密码成0335，那么打开的密码也是0335，这种叫做对称密钥，也就是开锁和关锁用的是同一个密码。另外一种关闭的密码与打开的密码不同，叫做非对称密钥。在网络传输中，如果你要和其他人传输一段重要的信息，例如你最怕的蔬菜的名字。你想要加密传输，那么你可以把这段信息通过密钥加密，例如你要传输的是
芹菜，苦瓜，香菜  </description>
    </item>
    
    <item>
      <title>前端or后端（未完成）</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%89%8D%E7%AB%AFor%E5%90%8E%E7%AB%AF/</link>
      <pubDate>Tue, 27 Feb 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%89%8D%E7%AB%AFor%E5%90%8E%E7%AB%AF/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。</description>
    </item>
    
    <item>
      <title>如何准备面试（未完成）</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</link>
      <pubDate>Tue, 27 Feb 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
 分析阶段 准备阶段 面试阶段 面试结束  分析阶段 找新工作之前，先认真思考下几个问题
 工作中哪方面对你比较重要？
先根据以下几点排序
 薪酬 公司福利／工作环境 工作方向（假如你要从技术转向管理，这个岗位提供这样的可能吗？) 公司发展前景 个人成长速度   了解自己的想法之后，之后筛选公司以及准备面试的问题都会有更多把握。根据不同的着重点，你可以向面试官问相应的问题。这点我们之后会介绍，问问题非常重要，我遇见很多求职者感觉不好意思问这类问题，觉得面试官会觉得很烦，或者自己根本没有一个想好要问什么问题，我觉得问问题是沟通和了解的一个非常好的方法。
 自己的优势和劣势是什么？  优势可以从这几点入手（后面是面试官的想法）：
- 大型项目的经验 （能解决项目普遍出现的问题，代码能力应该不会差。） - 作为主要参与者得过奖项 (聪明，勇于尝试） - 维护优秀的开源项目 (懂得团队协作，能写出优秀的代码） - 发表过论文或者优秀的博客文章 (研究能力强，分析能力强） - 毕业于不错的学校 (学习努力）  劣势
- 非计算机专业毕业 （计算机基础薄弱） - 算法题无法做到bug free （数据结构和算法知识薄弱） - 系统设计题没有很好地完成 （对系统设计没有认真思考，没有自己的理解）  如果你现在是自己的第一份工作，从来没有跳槽过，那么你可能不清楚自己的价值。我第一次跳槽的时候也是，我海投了一家著名的大公司，居然让我去面试。我虽然得到了面试机会，但是因为没有充分地准备技术问题，我并没有得到那份工作。后来当我在新公司协助招聘和面试的时候，我发现，原来招人真的是一件非常难的事。招的人要有计算机基础知识，有项目经验，愿意学习而且愿意来这家公司，是多么难的事，现在的后端工程师，招了超过3个月，筛选超过150份简历，面试30个求职者才招进来。所以如果你选择跳槽或者找工作之前，先别急着海投，万一你想去的公司让你明天面试，你准备好了吗？如果没有准备好的话，就浪费了一个很好的机会。下一次可能就要一年后（大公司通常有一年的冷却期，也就是如果这次面试没过，一年后才有机会重新面试）。了解自己的价值可以从认真写简历开始，从简历你可以看到自己哪里不足。是数据结构，算法薄弱，还是项目经验少。
准备阶段  越早准备越好  科技公司那么多，机会那么多，随时都有更好的机会。所以你应该随时都有转新工作的准备。准备分为
1. [技术知识](#技术知识) 2. 项目经验 3. 修改简历 4. 模拟面试  技术知识  计算机科学基础</description>
    </item>
    
    <item>
      <title>编程语言选择（未完成）</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E9%80%89%E6%8B%A9/</link>
      <pubDate>Tue, 27 Feb 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E9%80%89%E6%8B%A9/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。</description>
    </item>
    
    <item>
      <title>DNS查询</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/dns%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/dns%E6%9F%A5%E8%AF%A2/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
当你在浏览器输入www.apple.com。按下回车之后，浏览器跳到苹果的官网，把iPhoneX的介绍和图片显示出来。浏览器是如何通过www.apple.com这个域名找到iPhone的内容并且正确显示呢？第一步就要经过DNS查询。
 DNS查询 为什么要使用域名？ Q&amp;amp;A  DNS查询 DNS查询其实很好理解，生活上比较贴近的例子就像用黄页找电话号码。在我小的时候网络还在起步阶段，家家户户都要准备一本比字典还要厚的黄页来专门记载每户的电话号码。有一次我打给魏同学问作业，先从黄页的字母表翻到W，接着根据他的家庭地址猜测哪个是他家的电话（因为黄页通常都记载家长的名字），最后才能找到对应的电话号码打过去。难以置信吧，我现在回想起来也觉得。
刚开始，互联网联网的电脑加起来才几千台。每台电脑都保存一个类似黄页的文件（称为hosts文件）。用作记载域名对应哪个IP地址。
www.enginego.org 104.24.120.11 www.apple.com 119.145.144.223 www.ieee.org 23.38.177.118  （每一行分别对应着域名和IP地址）
当我们在浏览器输入域名的时候，浏览器会先查询这个hosts文件，找到对应的IP地址。然后再通过IP地址获取到服务器里面的资源，也就是iPhoneX的简介和图片。
为什么要使用域名？  容易记忆 计算机比较擅长处理数字，但是人类就差多了，访问苹果官网要背那么多数字显然不现实。使用域名就像我们使用手机的通讯录一样，我们会为常用的电话号码添加联系人姓名，打电话的时候直接输入名字就可以拨打，不需要背电话号码。 容易扩展 早期的计算机和IP地址是一一对应的关系，但是一台计算机的性能并不能承受大量用户的请求。而一个域名可以对应多个IP地址。这样不同地区的用户就会查询到不同的IP地址，公司也能使用多台服务器来提供服务了。   不过问题随着互联网的发展慢慢显现了，小时候的黄页每年买一本，要是在一年中你更换了电话号码，其他人也就找不到你了。互联网也是，每个小时都有新的域名被注册，新的主机加入互联网，如果还只是定时更新hosts文件会出现几个问题。
 主机数量太多了，现在已经超过10亿台设备接入互联网，每次查询的话都要从这里面查会比较慢。 大部分的网站用户根本不会上，就像大部分在黄页上的人我都不会联系。每上线一个小网站就更新全球的电脑这样显然小题大做了。那么有什么方法可以解决这个问题呢？  （很可惜，这是治标不治本的方法）
现代的计算机DNS查询会经过这3个步骤，一旦查询到，就会返回结果，并且跳过剩下的步骤：
 先查询浏览器有没有保留缓存 如果你之前访问过这个网站，那么浏览器会保存对应的IP地址，这样就能减少查询IP地址的时间。
 查询本地的hosts文件 （没错，hosts文件还没有退出时代）如果hosts文件有对应的内容，例如上面的
www.apple.com 119.145.144.223  那么计算机就会直接使用这个IP地址 你可以看看自己电脑的hosts文件看看有没有对应的内容
Windows c:\windows\system32\drivers\etc\hosts macOS /etc/hosts  DNS服务器查询 当计算机在前两个方法都没有找到对应的IP地址，就会进行DNS服务器查询，它会发送一个UDP请求到最近的子域名服务器（默认是ISP运营商提供，在国内就是中国电信，中国联通，中国移动这几家），从它们中获取到IP地址。子域名服务器定时从根域名服务器中获取最新的内容域名和IP的对应关系。
  经过这三部，我们只需要记住某个网站的域名，就能获取到该网站的IP地址了。
Q&amp;amp;A  Q: 那么是不是破坏这13组根域名服务器就能破坏互联网的查询功能呢？例如别人如果输入苹果的域名却跳到一个其他的网站呢。
 A: 是的。很遗憾它分布在全世界各个地区，很难同时攻击它们 :D
 Q: 浏览器直接输入DNS查询到的苹果的IP地址，是不是就能访问到www.apple.com呢？
 A: 很遗憾地说，在现代的互联网，大部分情况下是不可以的。</description>
    </item>
    
    <item>
      <title>Windows安装Docker教程</title>
      <link>https://www.enginego.org/%E5%B7%A5%E5%85%B7/docker/windows%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85docker%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%B7%A5%E5%85%B7/docker/windows%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85docker%E6%95%99%E7%A8%8B/</guid>
      <description>作者：Windson Yang 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
Windows安装Docker教程 官方英文教程
安装前须知 你的系统需满足以下几个条件，如果不满足以下要求，请参考第二节
 确保你电脑安装了64位的Windows 10 Pro, Enterprise或者Education(1511 November update, Build 10586 or later)版本。
 如果你的电脑安装了VirtualBox（一个虚拟机软件，默认系统没有安装）请注意，Windows的Docker版本因为需要Microsoft Hyper-V来运作，安装之后会令VirtualBox无效。
 必须启动虚拟化（默认启动），可以在任务管理中找到这一项确保enabled
Windows8检查
点击开始 &amp;gt; 任务管理 &amp;gt; 性能 &amp;gt; CPU
黄色的Virtualization为Enabled即可
Windows7检查
运行Microsoft® Hardware-Assisted Virtualization Detection Tool工具，然后按照步骤来检测。
   Docker建立的容器和镜像会被计算机上面的所有用户共享，多账号的系统中要注意数据安全问题。
 开始安装  下载Docker稳定版 双击下载文件夹中的InstallDocker.msi文件。 阅读协议内容觉得没问题之后点击接受协议（不接受将无法安装:O)，然后安装。   一般软件应该安装在非系统盘（C盘）中，这样即使以后需要重装系统，软件也不会丢失。安装路径不要包含中文）
  输入系统管理员密码使Docker可以安装网络组件。 完成  启动Docker 安装完成后Docker会自动启动，你可以从状态栏看到Docker正在运作 验证安装成功 运行终端(cmd.exe或者PowerShell)
PS C:\Users\Docker&amp;gt; docker --version Docker version 17.03.0-ce, build 60ccb22  看到Docker version提示的字样代表安装成功了</description>
    </item>
    
    <item>
      <title>macOS系统安装docker教程</title>
      <link>https://www.enginego.org/%E5%B7%A5%E5%85%B7/docker/macos%E5%AE%89%E8%A3%85docker%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%B7%A5%E5%85%B7/docker/macos%E5%AE%89%E8%A3%85docker%E6%95%99%E7%A8%8B/</guid>
      <description>作者：Windson Yang 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
(官方英文教程)[https://docs.docker.com/toolbox/toolbox_install_mac/]
 系统必须满足以下全部要求：  2010后的苹果电脑，支持英特尔MMU内存虚拟 10.10.3或者更新的苹果系统 从Docker1.13版本（准备推出）之后不再支持10.10版本（OS X 10.10 Yosemite） 不能安装4.3.30版本之前的VirtualBox（默认系统并没有这个软件）    下载软件Docker for macOS 双击Docker.dmg安装
 双击应用程序中的Docker.app来启动Docker
 系统会请求你输入密码来启动Docker，Docker需要特殊权限来安装网络组件
 然后可以在屏幕右上角看到Docker的标志
 可以点击这个标志浏览设置
 如此简单就安装成功啦，可以吃点巧克力奖励下自己了。:D
  </description>
    </item>
    
    <item>
      <title>协议</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%8D%8F%E8%AE%AE/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
计算机使用了多种多样的协议，大家接触得比较多的是HTTP, TCP/IP, FTP, ICMP等，计算机中的协议和我们现实生活中签的协议其实挺像，双方都按照协议上的约定发送和解析数据。举个例子，你和你的朋友通过短信约定明天吃饭的时间地点。信息可以是：
 明天 上午9点 在公司等
 即使改变文字的顺序
 明天 在公司等吧， 上午9点
 一般人也能理解。不过计算机不一样，你可以把计算机当成患强迫症的朋友，它会要求你发的信息一定要符合这个约定：
日期（两个字）-&amp;gt; 时间（四个字）-&amp;gt; 地点（四个字）   明天 &amp;ndash;日期&amp;ndash; 上午9点 &amp;ndash;时间&amp;ndash; 在公司等 &amp;ndash;地点&amp;ndash;
 只要你和朋友遵守这个约定发送和接受信息，那么你们就互相遵守了一个协议。
这样有什么优点呢？  无论对计算机或者人类来说，信息都变得有序和容易处理。当我们知道信息遵守协议A的时候，我们不需要阅读信息都知道前两个字是日期，接着是四个字的时间，最后是四个字的地点。  举个常见的例子，当你使用浏览器访问www.apple.com，浏览器其实是按照HTTP协议的约定向苹果服务器发出信息：
第一行是请求方法和协议版本（8个字节） 第二行是请求的URL（30个字节） 第三行是连接是否持久化（30个字节） ...  实际发送的信息是：
0000 b0 7f b9 a3 68 36 98 e0 d9 9d a3 8f 08 00 45 00 0010 02 0a 76 f9 40 00 40 06 1e d1 c0 a8 01 58 68 18 0020 79 0b fe 5b 00 50 55 fb ab bc e6 45 57 80 50 18 .</description>
    </item>
    
    <item>
      <title>域名</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%9F%9F%E5%90%8D/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%9F%9F%E5%90%8D/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
计算机知识往往互相关联，要真正了解域名是什么，必须先了解什么是URI。这里有一些常见的例子。
https://www.apple.com http://www.w3c.org ftp://example.org/resource.txt file:///Users/example/hello.jpg  最后两个大家可能不太熟悉，以最后一个为例子，你们可以尝试把自己电脑中任意的文件拖放到浏览器中，浏览器会去猜这个文件类型，一些常见的文件类型例如图片，浏览器可以判断并渲染出来。同时浏览器的地址栏也会变成file开头。这个例子中的file就是这个URI所使用的协议。常见的协议还有
HTTP 超文本传输协议 SMTP 邮件协议 telnet 终端传输协议 DNS 域名系统协议 DHCP 动态主机配置协议  好吧，我承认部分对于一般大众不是很常见，不过如果你想认真学习编程，起码看到这些名词的时候知道是什么。感兴趣的学生可以前往Lists of network protocols。那么协议又是什么呢？其实协议的本质非常简单。
域名（Domain names）是互联网基础架构的关键部分。它们为互联网上任何可用的网页服务器提供了人类可读的地址。 任何连上互联网的电脑都可以通过一个公共IP地址访问到，对于IPv4来说，这个地址由32位组成（它们通常写成四个范围在0~255以内，由点分隔的数字组成，比如173.194.121.32），而对于IPv6来说，这个地址由128位组成，通常写成八组由冒号分隔的四进制数(e.g., 2027:0da8:8b73:0000:0000:8a2e:0370:1337).  </description>
    </item>
    
    <item>
      <title>基础术语</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E6%9C%8D%E5%8A%A1%E7%AB%AF/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E6%9C%8D%E5%8A%A1%E7%AB%AF/</guid>
      <description> 作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
服务端 很简单，服务器就是一台**24小时运行**，运行着**专为服务器设计的系统**的**高性能计算机**。它也是由内存，硬盘，CPU组成。不过它会根据这台服务器的用途来配置不同的组件。有些服务器专门用来存储文件，图片，那么它就需要更大的硬盘，对CPU的要求就没那么高。有些专门用来进行高密度的计算，例如视频转格式，数据分析那么就要更快的CPU。 服务器会根据不同客户端的请求返回不同的内容，当你使用浏览器访问一个页面的时候，实际上浏览器就是寻找该页面对应的服务器获取相应的图片和文字内容。  客户端 常见的客户端包括浏览器，手机，它请求服务器需要的资源，然后客户端解析返回的内容并且显示给用户。  </description>
    </item>
    
    <item>
      <title>理解字符串编码</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
在打开网页或者文件的时候，你一定会遇过像这样的字符串乱码问题：
É��OÇ��，系统包括了...  或者报错
UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xc4  或多或少也遇到Unicode, UTF-8, ASCII, Latin-1这些编码术语。要真正地理解字符串编码，必须要了解计算机的一些基础知识，例如字符串如何存储与转换。如果只是希望靠运气来解决或者避开它，反而会在一次次盲目的尝试中浪费更多的时间。
 基础术语 计算机如何存储数据 ASCII编码 GBK编码 Unicode UTF-8编码 总结  ![like_unicode]()
基础术语  字符 字符串 键值表 字符串编码与解码  字符 A B C 天 气 エ ン コ 😁  上面的用空格分割的都是单个字符(Character)，它代表对人类能看懂的有意义的语言文字。
字符串 Hello 天气 Hola  字符串(Stirngs)就是多个字符组成的集合
键值表 一一对应的表，例如函数
y = x * 2  每个x都对应着唯一的一个y值，x与y组成的集合就是键值表(Hash Table)，例如：
1 -&amp;gt; 2 2 -&amp;gt; 4 3 -&amp;gt; 6  这里的每一个x(1, 2, 3)都有对应的y(2, 4, 6)</description>
    </item>
    
    <item>
      <title>相对路径，绝对路径</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E8%B7%AF%E5%BE%84/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
当前路径 当你打开终端的时候，会看到例如：
Windsons C:\usr\foo\: OSX WindsondeMacBook-Air:/usr/foo/  这里的&amp;rdquo;C:\usr\foo\&amp;ldquo;和&amp;rdquo;/usr/foo/&amp;ldquo;指当前执行指令的路径。也就是你的*当前路径*，你在终端中输入的指令，默认针对的就是当前路径，假如你输入&amp;rdquo;ls&amp;rdquo;(macOX)/&amp;ldquo;dir&amp;rdquo;(Windows)，计算机会理解成&amp;rdquo;ls/dir /usr/foo/&amp;ldquo;，所以会列出*当前路径中&amp;rdquo;/usr/foo/&amp;ldquo;下面的所有文件。
那什么是绝对路径和相对路径呢？ 举个现实生活的例子： Cherry在路上遇到Sunkist，它问Sunkist的公司地址在哪里，Sunkist可能有两种答案：
 中国广东省广州市思哲路石室大厦 以这里为起点，西南方向500米的石室大厦  这两个答案都正确，第一个答案从国家到省份城市巨细无遗地描述称为绝对路径， 第二个答案以当前的位置为起点所描述的称为相对路径。
例如：foo文件夹的绝对路径是
C:\Administor\foo\  你想要列出这个文件夹里面的所有文件，你可以告诉计算机这个文件夹的完整地址，也就是绝对路径
dir C:\Administor\foo\  也可以根据当前自己的位置找这个文件（这时候输入的就是相对路径），假如你打开终端，当前路径是
C:\Administor\bar\:  那么你也可以这样列出：
dir ..\foo\  在路径命令中&amp;rdquo;.&amp;ldquo;以及&amp;rdquo;..&amp;ldquo;这两个符号有特殊意义，分别代表当前路径以及上一级目录，也就是说如果你当前路径是：
C:\Administor\bar\  那么
.\ = C:\Administor\bar\ ..\ = C:\Administor\  当我们要找这个文件夹
C:\Administor\foo\  需要先回到上一层目录
dir ..\  然后再使用cd命令进入bar目录
cd bar\  如何切换路径 可以使用cd指令
cd [PATH]  这里的path既可以是绝对路径也可以是相对路径，如果当前路径为：
C:\Administor\foo\:  你要跳到
C:\whatever\sunkist\:  就可以</description>
    </item>
    
    <item>
      <title>终端，命令行, shell</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E7%BB%88%E7%AB%AF/</link>
      <pubDate>Mon, 08 Jan 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E7%BB%88%E7%AB%AF/</guid>
      <description>作者：Windson Yang
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处（www.enginego.org）。
终端是一个可以通过命令行执行其他程序的程序 如果你曾经用过DOS系统，对这张图片应该不会陌生： (图片来源维基百科)
如果你没有接触过DOS这样久远的系统，你可以尝试先打开自己计算机的终端
macOS: 同时按住&amp;quot;control&amp;quot;+&amp;quot;space&amp;quot;键，在搜索框输入termianl，&amp;quot;回车&amp;quot; Windows 7：打开&amp;quot;开始&amp;quot;菜单，在搜索框里输入cmd，&amp;quot;回车&amp;quot; Windows 8+：同时按住&amp;quot;win&amp;quot;+&amp;quot;Q&amp;quot;键，然后在弹出的搜索框里输入cmd，&amp;quot;回车&amp;quot;  成功打开之后你会看到计算机打开了一个类似上面图片的一个程序。光标会停留在某一行。类似：
WindsondeMacBook-Air:~ windson$ |  接下来你可以通过这个程序执行不同的程序。基本所有编程语言（Python，C，C++）都可以通过终端来执行。你可以理解终端是一个执行其他程序的程序。 你在电影里面看到一个很酷的黑客对着一个黑的屏幕疯狂敲键盘，一般他们使用的就是这个程序。 当你看到这样的界面的时候，可以尝试输入一个命令，然后让终端执行。
macOS: &amp;quot;ls&amp;quot;+&amp;quot;回车&amp;quot; Windows: &amp;quot;dir&amp;quot;+&amp;quot;回车&amp;quot;  输入回车之后，你会发现终端显示出了一些文字，仔细观察的话你会发现其实是你电脑中某个目录下的文件。ls/dir这个命令就是用作*列出当前目录的文件*，当然这个命令还有很多参数，也就是你可以告诉计算机显示什么文件（隐藏／非隐藏），显示文件的什么内容（创建日期，大小），ls回车只会调用一个常用的默认配置，假如你想把隐藏文件也显示的话，在终端输入
macOS: &amp;quot;ls -a&amp;quot;+&amp;quot;回车&amp;quot; Windows: &amp;quot;dir -a&amp;quot;+&amp;quot;回车&amp;quot;  终端还有很多其他指令，大家可以参照自己的操作系统找相应的命令。除此之外，终端还可以执行其他程序，我们习惯了图形界面双击图标打开一个应用（或者称为快捷方式），计算机先通过后续名猜测需要用什么方式打开或者运行这个文件，如果是图片的话，计算机就会用图片浏览器打开，如果是可执行文件（Windows下的exe后缀），计算机会先找到该应用的位置，然后运行这个应用，这个可执行文件里面包含了应用运行需要加载哪些资源，如何运行。在终端的话，如果要运行一个Python语言写的程序hello.py。在安装好Python之后可以直接输入
Python3 hello.py  其实就是告诉计算机用什么程序（Python）执行什么文件（hello.py）
终端小tips ctrl + c ctrl + d ctrl + z ctrl + a/e/u/k  为什么要用终端 以前的计算机根本没有图形界面，只能对着这样黑乎乎的界面一行行输入指令，然后祈祷它不会出错。既然现在已经有图形界面了，为什么我们还需要学习用终端呢？
 多功能，一般一个软件只会专注于一个功能，例如Word进行文字编辑，PowerPoint进行幻灯片编辑。但是你可以通过终端让计算机调用不同的程序完成多种多样的功能。
 方便，对，一开始可能难以置信，但是使用终端确实比图形界面（GUI，也就是我们平时看到的带有按钮以及经过设计的界面）要方便。你可能也会曾经遇过某一款软件更新，你找不到原本功能的按钮在哪里了。（例如某段时间Windows系统就把把“开始”菜单隐藏了。或者应用程序更新你找不到原本的功能按钮在哪里。）使用命令（例如上面的&amp;rdquo;ls&amp;rdquo;／&amp;rdquo;dir&amp;rdquo;）的话即使更新你也不需要担心，当然一开始你会要记住这些指令。
 高效，跨平台，跨机器，例如你要删除一个文件夹中（可能包含子文件夹）超过10天之前创建的所有文件，一般来说的话你需要一个个文件夹找，然后对每个文件夹里的文件进行时间排序，再手动删除，如果里面包含了100个文件夹那么会费很多时间，同时也容易出错。使用终端的话可以直接运行
find /path/to/base/dir/* -type f -ctime +10 -delete   而且只要跑同一个系统就不用担心命令会执行出错。（不用担心Word2003与Wrod2007的兼容问题）</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E8%A7%A3%E9%87%8A%E6%80%A7%E8%AF%AD%E8%A8%80or%E7%BC%96%E8%AF%91%E6%80%A7%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E8%A7%A3%E9%87%8A%E6%80%A7%E8%AF%AD%E8%A8%80or%E7%BC%96%E8%AF%91%E6%80%A7%E8%AF%AD%E8%A8%80/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/hook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/hook/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%86%85%E5%AD%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%86%85%E5%AD%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%A0%86%E6%A0%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%A0%86%E6%A0%88/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%B5%8C%E5%A5%97%E5%AD%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E5%B5%8C%E5%A5%97%E5%AD%97/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E6%8A%93%E5%8C%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E6%8A%93%E5%8C%85/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E6%9C%AF%E8%AF%AD/%E8%BF%9B%E7%A8%8B/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>